#First Version Of the code
#Includes all 3 of the classes seperated via ***

***********************************************************************************************************************
***********************************************************************************************************************
***********************************************************************************************************************

public class SnakeGame {

    public static void main(String[] args){

        new GameFrame(); //declares GameFrame from GameFrame class
    }
}

***********************************************************************************************************************
***********************************************************************************************************************
***********************************************************************************************************************

import javax.swing.*;

public class GameFrame extends JFrame {

    GameFrame(){

        GamePanel panel = new GamePanel(); //declares GamePanel from GamePanel class
        this.add(panel);
        this.setTitle("Snake"); //title of the opened window
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setResizable(false);
        this.pack();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
    }
}

***********************************************************************************************************************
***********************************************************************************************************************
***********************************************************************************************************************

import javax.swing.JPanel;
import java.util.Random;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class GamePanel extends JPanel implements ActionListener{

    static final int SCREEN_WIDTH = 600;
    static final int SCREEN_HEIGHT = 600;
    static final int UNIT_SIZE = 30; //how big basically everything in the game will be
    static final int GAME_UNITS = (SCREEN_WIDTH*SCREEN_HEIGHT)/UNIT_SIZE;
    static final int DELAY = 130; //sets how fast the game runs - higher numbers will make it slower and less smooth
    final int x[] = new int [GAME_UNITS];
    final int y[] = new int [GAME_UNITS];
    int bodyParts = 6; //starting number of body parts
    int applesEaten; //the number of apples eaten by the player
    int appleX; //the apples x-coordinate
    int appleY; //the apples y-coordinate
    char direction = 'R'; //sets initial direction the snake travels
    boolean running = false;
    Timer timer; //creates instance of timer
    Random random; //creates instance of random

    GamePanel(){
        random = new Random();
        this.setPreferredSize(new Dimension(SCREEN_WIDTH,SCREEN_HEIGHT));
        this.setBackground(Color.BLACK); //this variable determines the background color
        this.setFocusable(true);
        this.addKeyListener(new MyKeyAdapter());
        startGame(); //declares class start game which kick-starts the whole game
    }
    public void startGame(){
        newApple();
        running = true; //when boolean running = true the game runs
        timer = new Timer(DELAY,this);
        timer.start();

    }
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        draw(g);
    }
    public void draw(Graphics g){

        if(running) {
            //creates the grid on the screen
            for (int i = 0; i < SCREEN_HEIGHT / UNIT_SIZE; i++) {
                g.setColor(Color.DARK_GRAY);
                g.drawLine(i * UNIT_SIZE, 0, i * UNIT_SIZE, SCREEN_HEIGHT);
                g.drawLine(0, i * UNIT_SIZE, SCREEN_WIDTH, i * UNIT_SIZE);
            }
            //draws the apple on the screen at a random location determined in class newApple
            g.setColor(Color.RED);
            g.fillOval(appleX, appleY, UNIT_SIZE, UNIT_SIZE);

            for (int i = 0; i < bodyParts; i++) {
                if (i == 0) {
                    g.setColor(Color.GREEN);
                    g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
                }
                else {
                    g.setColor(new Color(45, 180, 0));
                    //makes body colors random
                    g.setColor(new Color(random.nextInt(255),random.nextInt(255),random.nextInt(255)));
                    g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
                }
            }
            //displays score while playing
            g.setColor(Color.red);
            g.setFont( new Font("Ink Free",Font.BOLD, 40));
            FontMetrics metrics2 = getFontMetrics(g.getFont());
            g.drawString("Score: "+applesEaten, (SCREEN_WIDTH - metrics2.stringWidth("Score: "+applesEaten))/2, g.getFont().getSize());
        }
        else{
            gameOver(g);
        }
    }
    public void newApple(){
        //sets size of the apple based off of UNIT_SIZE
        appleX = random.nextInt(SCREEN_WIDTH/UNIT_SIZE)*UNIT_SIZE;
        appleY = random.nextInt(SCREEN_HEIGHT/UNIT_SIZE)*UNIT_SIZE;

    }
    public void move(){
        //controls the snakes body movement
        for(int i = bodyParts;i>0;i--) {
            x[i] = x[i-1];
            y[i] = y[i-1];
        }

        switch(direction) {
            //not taking in input but uses input to move the snake
            case 'U':
                y[0] = y[0] - UNIT_SIZE;
                break;
            case 'D':
                y[0] = y[0] + UNIT_SIZE;
                break;
            case 'L':
                x[0] = x[0] - UNIT_SIZE;
                break;
            case 'R':
                x[0] = x[0] + UNIT_SIZE;
                break;
        }

    }
    public void checkApple(){
        //checks if player eats apple and then puts a new apple on the screen
        if((x[0] == appleX) && (y[0] == appleY)){
            bodyParts++; //ads a body part to the character after an apple is eaten
            applesEaten++; //adds 1 to the applesEaten variable (the player score)
            newApple(); //declares the new apple class to randomly put a new apple on the screen
        }
    }
    public void checkCollisions() {
        for(int i = bodyParts;i>0;i--) { //checks if head collides with body
            if((x[0] == x[i]) && (y[0] == y[i])) {
                running = false;
                break;
            }
        }
        if(x[0] < 0) {  //check if head touches left border
            running = false;
        }
        if(x[0] > SCREEN_WIDTH - UNIT_SIZE) { //check if head touches right border
            running = false;
        }
        if(y[0] < 0) {  //check if head touches top border
            running = false;
        }
        if(y[0] > SCREEN_HEIGHT - UNIT_SIZE) { //check if head touches bottom border
            running = false;
        }

        if(!running) {
            timer.stop();
        }
    }
    public void gameOver(Graphics g){
        //displays score after game over
        g.setColor(Color.red);
        g.setFont( new Font("Ink Free",Font.BOLD, 40));
        FontMetrics metrics1 = getFontMetrics(g.getFont());
        g.drawString("Score: "+applesEaten, (SCREEN_WIDTH - metrics1.stringWidth("Score: "+applesEaten))/2, 350);
        //game over text
        g.setColor(Color.red);
        g.setFont( new Font("Ink Free",Font.BOLD, 75));
        FontMetrics metrics2 = getFontMetrics(g.getFont());
        g.drawString("Game Over", (SCREEN_WIDTH - metrics2.stringWidth("Game Over"))/2, SCREEN_HEIGHT/2);

    }
    @Override
    public void actionPerformed(ActionEvent e){

        if(running){ //declares the classes needed to start the game if boolean running is true
            move();
            checkApple();
            checkCollisions();
        }
        repaint();
    }

    public class MyKeyAdapter extends KeyAdapter{
        @Override
        public void keyPressed(KeyEvent e){ //this is what gets the key inputs from the player
            switch(e.getKeyCode()){
                case KeyEvent.VK_A:
                    if(direction != 'R'){ //Used to prevent player from doing 180-degree turn
                        direction = 'L';
                    }
                    break;
                case KeyEvent.VK_D:
                    if(direction != 'L'){ //Used to prevent player from doing 180-degree turn
                        direction = 'R';
                    }
                    break;
                case KeyEvent.VK_W:
                    if(direction != 'D'){ //Used to prevent player from doing 180-degree turn
                        direction = 'U';
                    }
                    break;
                case KeyEvent.VK_S:
                    if(direction != 'U'){ //Used to prevent player from doing 180-degree turn
                        direction = 'D';
                    }
                    break;
            }
        }
    }
}
